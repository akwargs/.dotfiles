set nocompatible
filetype off

"------------------------------------------------------
" if v:version >= 900
"------------------------------------------------------
if empty(glob("$HOME/.vim/autoload/plug.vim"))
  if has("win32")
    silent ! powershell -Command "
          \ New-Item -Path "$env:HOME/.vim" -Name autoload -Type Directory -Force;
          \ Invoke-WebRequest
          \ -Uri 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
          \ -OutFile "$env:HOME/.vim/autoload/plug.vim"
          \ "
  else
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
endif

if has("win32")
  set runtimepath+=~/.vim/
  set encoding=utf-8
  set t_Co=256
endif

if filereadable( expand("$HOME/.vim/autoload/plug.vim") )
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif

  call plug#begin('$HOME/.vim/plugged')
  " Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  " Plug 'tpope/fugitive-gitlab.vim'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-rsi'          ""readline style insertion
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-tbone'        ""tmux
  Plug 'tpope/vim-sleuth'       ""auto sw et
  Plug 'tpope/vim-characterize'
  Plug 'tpope/vim-speeddating'
  " Plug 'tpope/vim-apathy'       ""path searching options

  Plug 'junegunn/vim-easy-align'
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
  Plug 'godlygeek/tabular'
  Plug 'easymotion/vim-easymotion'
  Plug 'justinmk/vim-sneak'
  let g:sneak#label = 1
  Plug 'inkarkat/vim-ReplaceWithRegister'
  Plug 'tommcdo/vim-exchange'
  Plug 'dbakker/vim-paragraph-motion'
  " Plug 'terryma/vim-multiple-cursors'
  " Plug 'unblevable/quick-scope'  ""too slow
  " Plug 'bkad/CamelCaseMotion'
  " Plug 'jlanzarotta/bufexplorer'

  " Programming
  Plug 'sheerun/vim-polyglot'
  let g:python_highlight_all = 1
  Plug 'Vimjas/vim-python-pep8-indent'
  " Plug 'editorconfig/editorconfig-vim'
  Plug 'SirVer/ultisnips'
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-b>"
  let g:UltiSnipsJumpBackwardTrigger="<c-z>"
  Plug 'honza/vim-snippets'
  " Plug 'ervandew/supertab'
  " Plug 'tpope/vim-jdaddy'       ""JSON
  " Plug 'tpope/vim-scriptease'   ""Dev Plugins
  Plug 'tpope/vim-ragtag'
  Plug 'kien/ctrlp.vim'

  " Objects
  " Plug 'wellle/targets.vim'
  " Plug 'kana/vim-textobj-user'
  " Plug 'kana/vim-textobj-entire'
  " Plug 'kana/vim-textobj-indent'
  " Plug 'preservim/vim-textobj-sentence'
  " Plug 'preservim/vim-textobj-quote'
  " Plug 'michaeljsmith/vim-indent-object'
  " Plug 'vim-scripts/argtextobj.vim'
  " let g:argtextobj_pairs="[:],(:),<:>"

  " Signs and Colors
  Plug 'airblade/vim-gitgutter'
  Plug 'kshenoy/vim-signature'
  Plug 'machakann/vim-highlightedyank'
  let g:highlightedyank_highlight_duration = 250
  let g:highlightedyank_highlight_in_visual = 0
  Plug 'Yggdroot/indentLine'
  let g:indentLine_char  = ''
  Plug 'frazrepo/vim-rainbow'
  let g:rainbow_active   = 1
  let g:rainbow_guifgs   = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
  let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

  " Colorscheme
  Plug 'itchyny/lightline.vim'
  " Plug 'vim-airline/vim-airline'
  " Plug 'vim-airline/vim-airline-themes'
  Plug 'preservim/vim-colors-pencil'
  Plug 'pbrisbin/vim-colors-off'
  Plug 'flazz/vim-colorschemes'
  Plug 'axvr/photon.vim'
  Plug 'nanotech/jellybeans.vim'

  " New/Enhance functionality
  Plug 'tpope/vim-vinegar'    ""Improves netrw
  Plug 'vimwiki/vimwiki'
  let g:vimwiki_listsyms = '󰂎󰁻󰁽󰂁󱟢'
  let g:vimwiki_list = [{'path': '~/.vim/vimwiki/',
                        \ 'syntax': 'markdown', 'ext': '.md',
                        \ 'links_space_char': '_'}]
  au FileType vimwiki setlocal tw=0

  " Try later
  " Plug 'preservim/vim-pencil'
  " Plug 'preservim/vim-lexical'
  " Plug 'preservim/vim-litecorrect'
  " Plug 'preservim/vim-wordy'
  call plug#end()
endif

if filereadable( expand("$HOME/.vim/plugged/vim-airline/plugin/airline.vim") )
  " let g:airline_theme = 'pencil'
  if !has("gui_running")
    let g:airline_powerline_fonts = 1
  endif
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  let g:airline_section_z = airline#section#create(['%3b|0x%02B ',
                                  \ 'windowswap',
                                  \ 'obsession',
                                  \ '%p%%',
                                  \ 'linenr',
                                  \ 'maxlinenr',
                                  \ 'colnr'])
endif

if filereadable( expand("$HOME/.vim/plugged/lightline.vim/plugin/lightline.vim") )
  let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active' : {
    \   'left' : [ [ 'mode', 'paste' ],
    \            [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
    \   'right': [ [ 'percent' ],
    \            [ 'fileformat', 'fileencoding', 'filetype', 'charvaluedec', 'charvaluehex' ],
    \            [ 'lineinfo' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ 'component': {
    \   'charvaluedec': '%b',
    \   'charvaluehex': '0x%B'
    \ },
  \ }
  endif

" extended matching with "%"
packadd! matchit
" or Plug 'adelarsq/vim-matchit'
"------------------------------------------------------
" endif "if v:version >= 900
"------------------------------------------------------

filetype plugin indent on
syntax on

let mapleader = " "
set backup
set cmdheight=2
set clipboard=unnamed
" set cursorline
" set cursorcolumn
set display=truncate
set expandtab
" set fileformat=unix
set fileformats=unix,dos,mac
set foldmethod=syntax
set hidden
set history=100
set ignorecase
set incsearch
set infercase
" set iskeyword+=- " to make '-' a word character
" set iskeyword-=_ " to make '_' not a word character
set nolangremap
set laststatus=2
set list
set listchars=tab:»·,trail:·
set modelines=1
set mouse=
set nu rnu
if &diff
  set nu nornu nocul nocuc
endif
set pastetoggle=<F12>
set ruler
set shiftwidth=4
set signcolumn=yes
set smartcase
set showmatch
set smartindent
set softtabstop=4
set nostartofline
set tabstop=4
set textwidth=80
" set undodir=.
set undofile
set visualbell
set whichwrap=<,>,h,l
set wildmenu
set wildignorecase
set wildmode=list:longest,full
set nowrapscan

au BufWinEnter * normal zR

augroup Python
  au!
  autocmd FileType python setlocal foldmethod=indent
augroup END

augroup Vim
  au!
  autocmd FileType vim setlocal sw=2 ts=2 sts=2 foldmethod=indent
augroup END

if filereadable( expand("$HOME/.vim/plugged/vim-pencil/plugin/pencil.vim") )
  function! Prose()
    call pencil#init()
    call lexical#init()
    call litecorrect#init()
    call textobj#quote#init()
    call textobj#sentence#init()

    " manual reformatting shortcuts
    nnoremap <buffer> <silent> Q gqap
    xnoremap <buffer> <silent> Q gq
    nnoremap <buffer> <silent> <leader>Q vapJgqap

    " automatic lefthand smartquote doesn't work right
    inoremap <buffer> <c-'> “
    inoremap <buffer> <a-'> ‘
    inoremap <buffer> -- —
    inoremap <buffer> ft' ′
    inoremap <buffer> in" ″

    " open most folds
    setlocal foldlevel=6

    " replace typographical quotes (reedes/vim-textobj-quote)
    map <silent> <buffer> <leader>qc <Plug>ReplaceWithCurly
    map <silent> <buffer> <leader>qs <Plug>ReplaceWithStraight

    " highlight words (reedes/vim-wordy)
    nnoremap <silent> <buffer> <F8> :<C-u>NextWordy<cr>
    xnoremap <silent> <buffer> <F8> :<C-u>NextWordy<cr>
    inoremap <silent> <buffer> <F8> <C-o>:NextWordy<cr>

  endfunction

  " automatically initialize buffer by file type
  autocmd FileType text call Prose()
endif

augroup vimStartup
  au!
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

if has("win32")
  function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg1 = substitute(arg1, '!', '\!', 'g')
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg2 = substitute(arg2, '!', '\!', 'g')
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let arg3 = substitute(arg3, '!', '\!', 'g')
    if $VIMRUNTIME =~ ' '
      if &sh =~ '\<cmd'
        if empty(&shellxquote)
          let l:shxq_sav = ''
          set shellxquote&
        endif
        let cmd = '"' . $VIMRUNTIME . '\diff"'
      else
        let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
      endif
    else
      let cmd = $VIMRUNTIME . '\diff'
    endif
    let cmd = substitute(cmd, '!', '\!', 'g')
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    if exists('l:shxq_sav')
      let &shellxquote=l:shxq_sav
    endif
  endfunction

  if &diffopt !~# 'internal'
    set diffexpr=MyDiff()
  endif
endif

if !&diff
  augroup signcolumngroup
    au!
    autocmd BufEnter,FocusGained,InsertLeave * if &signcolumn == "yes" | set rnu | endif
    autocmd BufLeave,FocusLost,InsertEnter   * if &signcolumn == "yes" | set nornu | endif
  augroup END
endif

map Q gq

inoremap <C-U> <C-G>u<C-U>
inoremap <C-Z> <C-O>u
inoremap <S-Insert> <C-R>+
inoremap ..l -------------------------------------------<CR><CR>
inoremap ..d ======<C-R>=strftime("%a %Y-%m-%d %H:%M:%S %z")<CR>========<CR><CR>

vnoremap <S-Del> "+x
vnoremap <C-Insert> "+y"
vnoremap <S-Insert> +gp
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
vnoremap < <gv
vnoremap > >gv

nnoremap / /\v
nnoremap <C-W>e     <C-W>=
nnoremap <C-W>=     <C-W>-
nnoremap <C-W>-     <C-W>s
nnoremap <C-W><bar> <C-W>v
nnoremap <C-W>c     <C-L>
nnoremap <C-W>X     <C-W>c
nnoremap <leader>j :%!jq .<CR>
nnoremap <leader>J :%!jq . -c<CR>
nnoremap <leader>l :nohl<CR>

function! Toggler()
  :GitGutterSignsToggle
  :IndentLinesToggle
endfunction

nnoremap <silent> <leader>nn :exe "set nu! rnu! list!" \| call Toggler()<CR>
nnoremap <silent> <leader>cc :exe "set colorcolumn=" . (&colorcolumn == "" ?R"80,120" : "")<CR>
nnoremap <silent> <leader>RR :exe "set rnu!"<CR>
nnoremap <silent> <leader>RC :exe "set cuc!"<CR>
" :command NN :IndentLinesToggle

iab <buffer> um µm
iab <buffer> usec µs

if !empty($VIM_LIGHT)
  set bg=light
  try
    " colorscheme pencil
    " let g:pencil_higher_contrast_ui = 1
    " let g:pencil_neutral_code_bg = 1
    " let g:pencil_gutter_color = 1
    " let g:pencil_spell_undercurl = 1
    " let g:pencil_terminal_italics = 1
    " colorscheme off
    " let g:colors_off_a_little=1
    " colorscheme stackoverflow
    colorscheme antiphoton
    highlight clear specialkey
    highlight clear signcolumn
    highlight clear foldcolumn
    " augroup HIGHLIGHT
    "   au!
    "   au ColorScheme * highlight clear specialkey
    "   au ColorScheme * highlight clear signcolumn
    "   au ColorScheme * highlight clear foldcolumn
    "   " au ColorScheme * highlight specialkey ctermfg=242
    "   " au ColorScheme * highlight specialkey ctermfg=249
    " augroup END
  catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
  endtry
else
  set bg=dark
  try
    colorscheme jellybeans
    " colorscheme photon
  catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme slate
    " colorscheme off
  endtry
endif

" vim:ft=vim:tw=0:sw=2:ts=2:sts=2:nowrap
