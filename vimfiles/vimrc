set nocompatible
filetype off
if empty(glob("$HOME/.vim/autoload/plug.vim"))
  if has("win32")
    silent ! powershell -Command "
          \ New-Item -Path "$env:HOME/.vim" -Name autoload -Type Directory -Force;
          \ Invoke-WebRequest
          \ -Uri 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
          \ -OutFile "$env:HOME/.vim/autoload/plug.vim"
          \ "
  else
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
endif

if has("win32")
  set runtimepath+=~/.vim/
  set encoding=utf-8
  set t_Co=256
endif

if filereadable( expand("$HOME/.vim/autoload/plug.vim") )
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif

  call plug#begin('$HOME/.vim/plugged')
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/fugitive-gitlab.vim'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-rsi'          ""readline style insertion
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-tbone'        ""tmux
  Plug 'tpope/vim-sleuth'       ""auto sw et
  Plug 'tpope/vim-characterize'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-apathy'       ""path searching options
  Plug 'junegunn/vim-easy-align'
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
  Plug 'godlygeek/tabular'
  Plug 'easymotion/vim-easymotion'
  Plug 'justinmk/vim-sneak'
  let g:sneak#label = 1
  Plug 'dbakker/vim-paragraph-motion'
  Plug 'inkarkat/vim-ReplaceWithRegister'
  Plug 'tommcdo/vim-exchange'
  Plug 'jlanzarotta/bufexplorer'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'sheerun/vim-polyglot'
  let g:python_highlight_all = 1
  Plug 'Vimjas/vim-python-pep8-indent'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'SirVer/ultisnips'
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-b>"
  let g:UltiSnipsJumpBackwardTrigger="<c-z>"
  Plug 'honza/vim-snippets'
  Plug 'tpope/vim-jdaddy'
  Plug 'tpope/vim-ragtag'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'wellle/targets.vim'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-entire'
  Plug 'adelarsq/vim-matchit'
  Plug 'tpope/vim-vinegar'
  Plug 'vimwiki/vimwiki'
  let g:vimwiki_listsyms = '󰂎󰁻󰁽󰂁󱟢'
  let g:vimwiki_list = [{'path': '~/vimfiles/vimwiki/',
                        \ 'syntax': 'markdown', 'ext': '.md',
                        \ 'links_space_char': '_'}]
  au FileType vimwiki setlocal tw=0
  Plug 'airblade/vim-gitgutter'
  Plug 'kshenoy/vim-signature'
  Plug 'machakann/vim-highlightedyank'
  let g:highlightedyank_highlight_duration = 250
  Plug 'Yggdroot/indentLine'
  let g:indentLine_char  = ''
  let g:indentLine_defaultGroup = 'SpecialKey'
  let g:indentLine_enabled = 0
  Plug 'frazrepo/vim-rainbow'
  let g:rainbow_active   = 1
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'preservim/vim-colors-pencil'
  Plug 'pbrisbin/vim-colors-off'
  Plug 'flazz/vim-colorschemes'
  Plug 'axvr/photon.vim'
  Plug 'nanotech/jellybeans.vim'
  call plug#end()
endif

filetype plugin indent on
syntax on
let mapleader = " "

if filereadable( expand("$HOME/.vim/plugged/vim-airline/plugin/airline.vim") )
  let g:airline_theme = 'pencil'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  let g:airline_section_z = airline#section#create(['%3b|0x%02B ',
                                  \ 'windowswap',
                                  \ 'obsession',
                                  \ '%p%%',
                                  \ 'linenr',
                                  \ 'maxlinenr',
                                  \ 'colnr'])
endif

set cmdheight=2
set clipboard=unnamed
set display=truncate
set expandtab
set fileformats=unix,dos
set foldmethod=syntax
set hidden
set history=100
set ignorecase
set incsearch
set infercase
" set iskeyword+=- " to make '-' a word character
" set iskeyword-=_ " to make '_' not a word character
set nolangremap
set laststatus=2
set linebreak
set list
set listchars=tab:»·,trail:·
set modelines=1
set mouse=
set nu rnu
if &diff
  set nu nornu nocul nocuc
endif
set pastetoggle=<F12>
set ruler
set shiftwidth=4
set signcolumn=yes
set smartcase
set showmatch
set smartindent
set softtabstop=4
set nostartofline
set tabstop=4
set textwidth=80
set timeout timeoutlen=3000 ttimeoutlen=100
if has('nvim')
  set noundofile
  set nobackup
else
  set undodir=.
  set undofile
  set backup
endif
set visualbell
set whichwrap=<,>,h,l
set wildmenu
set wildignorecase
set wildmode=list:longest,full
set nowrapscan

au BufWinEnter * normal zR

augroup Python
  au!
  autocmd FileType python setlocal foldmethod=indent
augroup END

augroup Vim
  au!
  autocmd FileType vim setlocal sw=2 ts=2 sts=2 foldmethod=indent
augroup END

augroup vimStartup
  au!
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

if !&diff
  augroup signcolumngroup
    au!
    autocmd BufEnter,FocusGained,InsertLeave * if &signcolumn == "yes" | set rnu | endif
    autocmd BufLeave,FocusLost,InsertEnter   * if &signcolumn == "yes" | set nornu | endif
  augroup END
endif

augroup Insert
  au!
  au InsertEnter,InsertLeave * set cul! cuc!
augroup END

function! Toggler()
  :GitGutterSignsToggle
endfunction

map Q gq

inoremap <C-U> <C-G>u<C-U>
inoremap <C-Z> <C-O>u
inoremap <S-Insert> <C-R>+
inoremap ..l -------------------------------------------<CR><CR>
inoremap ..d ============<C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>============<CR><CR>

vnoremap <S-Del> "+x
vnoremap <C-Insert> "+y"
vnoremap <S-Insert> +gp
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
vnoremap < <gv
vnoremap > >gv

nnoremap / /\v
nnoremap <C-W>e      <C-W>=
nnoremap <C-W>=      <C-W>-
nnoremap <C-W>-      <C-W>s
nnoremap <C-W><bar>  <C-W>v
nnoremap <C-W>c      <C-L>
nnoremap <C-W>X      <C-W>c
nnoremap <leader>jq  :%!jq .<CR>
nnoremap <leader>Jq  :%!jq . -c<CR>
nnoremap <leader>l   :nohl<CR>
nnoremap <silent> <leader>nn :exe "set nu! rnu! list!" \| call Toggler()<CR>
nnoremap <silent> <leader>cc :exe "set colorcolumn=" . (&colorcolumn == "" ? "80,120" : "")<CR>
nnoremap <silent> <leader>rr :exe "set rnu!"<CR>
nnoremap <silent> <leader>cl :exe "set cuc! cul!"<CR>

:command IN :IndentLinesToggle

iab <buffer> um µm
iab <buffer> usec µs

if !empty($VIM_LIGHT)
  set bg=light
  try
    colorscheme antiphoton
    " colorscheme off
    highlight clear specialkey
    highlight clear signcolumn
    highlight clear foldcolumn
  catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
    highlight clear specialkey
    highlight clear signcolumn
    highlight clear foldcolumn
  endtry
endif

if has("gui_running")
  set guifont=JetBrainsMonoNL_NFM_Light:h10:W200:cANSI:qDRAFT
  set guioptions=gmtTlar
  set mouse=nvi
  set mousehide
  set columns=130 lines=35
  map <ScrollWheelUp>   <C-Y>
  map <ScrollWheelDown> <C-E>
endif
" vim:ft=vim:tw=0:sw=2:ts=2:sts=2:nowrap
